// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// PodMan is an autogenerated mock type for the PodMan type
type PodMan struct {
	mock.Mock
}

type PodMan_Expecter struct {
	mock *mock.Mock
}

func (_m *PodMan) EXPECT() *PodMan_Expecter {
	return &PodMan_Expecter{mock: &_m.Mock}
}

// DeletePod provides a mock function with given fields: ctx, namespace, name
func (_m *PodMan) DeletePod(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for DeletePod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PodMan_DeletePod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePod'
type PodMan_DeletePod_Call struct {
	*mock.Call
}

// DeletePod is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *PodMan_Expecter) DeletePod(ctx interface{}, namespace interface{}, name interface{}) *PodMan_DeletePod_Call {
	return &PodMan_DeletePod_Call{Call: _e.mock.On("DeletePod", ctx, namespace, name)}
}

func (_c *PodMan_DeletePod_Call) Run(run func(ctx context.Context, namespace string, name string)) *PodMan_DeletePod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PodMan_DeletePod_Call) Return(_a0 error) *PodMan_DeletePod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PodMan_DeletePod_Call) RunAndReturn(run func(context.Context, string, string) error) *PodMan_DeletePod_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields:
func (_m *PodMan) Disconnect() {
	_m.Called()
}

// PodMan_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type PodMan_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
func (_e *PodMan_Expecter) Disconnect() *PodMan_Disconnect_Call {
	return &PodMan_Disconnect_Call{Call: _e.mock.On("Disconnect")}
}

func (_c *PodMan_Disconnect_Call) Run(run func()) *PodMan_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PodMan_Disconnect_Call) Return() *PodMan_Disconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *PodMan_Disconnect_Call) RunAndReturn(run func()) *PodMan_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// GetPodsForLabelSelector provides a mock function with given fields: ctx, namespace, labelSelector
func (_m *PodMan) GetPodsForLabelSelector(ctx context.Context, namespace string, labelSelector string) ([]v1.Pod, error) {
	ret := _m.Called(ctx, namespace, labelSelector)

	if len(ret) == 0 {
		panic("no return value specified for GetPodsForLabelSelector")
	}

	var r0 []v1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]v1.Pod, error)); ok {
		return rf(ctx, namespace, labelSelector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []v1.Pod); ok {
		r0 = rf(ctx, namespace, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PodMan_GetPodsForLabelSelector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPodsForLabelSelector'
type PodMan_GetPodsForLabelSelector_Call struct {
	*mock.Call
}

// GetPodsForLabelSelector is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - labelSelector string
func (_e *PodMan_Expecter) GetPodsForLabelSelector(ctx interface{}, namespace interface{}, labelSelector interface{}) *PodMan_GetPodsForLabelSelector_Call {
	return &PodMan_GetPodsForLabelSelector_Call{Call: _e.mock.On("GetPodsForLabelSelector", ctx, namespace, labelSelector)}
}

func (_c *PodMan_GetPodsForLabelSelector_Call) Run(run func(ctx context.Context, namespace string, labelSelector string)) *PodMan_GetPodsForLabelSelector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PodMan_GetPodsForLabelSelector_Call) Return(_a0 []v1.Pod, _a1 error) *PodMan_GetPodsForLabelSelector_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PodMan_GetPodsForLabelSelector_Call) RunAndReturn(run func(context.Context, string, string) ([]v1.Pod, error)) *PodMan_GetPodsForLabelSelector_Call {
	_c.Call.Return(run)
	return _c
}

// NewPodMan creates a new instance of PodMan. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPodMan(t interface {
	mock.TestingT
	Cleanup(func())
}) *PodMan {
	mock := &PodMan{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
